{
  "title": "Batch Query API Demo",
  "description": "Demonstrates the new batch query endpoints that accept multiple objectives and return multiple configurations",
  
  "new_endpoints": [
    {
      "method": "POST",
      "path": "/databases/{db_id}/instances/{instance_id}/batch-query",
      "description": "Batch query for main branch with multiple objectives"
    },
    {
      "method": "POST", 
      "path": "/databases/{db_id}/branches/{branch_id}/instances/{instance_id}/batch-query",
      "description": "Batch query for specific branch with multiple objectives"
    },
    {
      "method": "POST",
      "path": "/databases/{db_id}/branches/{branch_name}/working-commit/instances/{instance_id}/batch-query",
      "description": "Batch query for working commit with multiple objectives"
    },
    {
      "method": "POST",
      "path": "/databases/{db_id}/commits/{commit_hash}/instances/{instance_id}/batch-query", 
      "description": "Batch query for specific commit with multiple objectives"
    }
  ],

  "example_request": {
    "objectives": [
      {
        "id": "cost_minimization",
        "name": "Minimize total cost",
        "objectives": {
          "component-a": -1.0,
          "component-b": -0.8,
          "component-c": -0.5
        }
      },
      {
        "id": "performance_maximization", 
        "name": "Maximize performance",
        "objectives": {
          "component-high-perf": 2.0,
          "component-premium": 1.5,
          "component-basic": 0.1
        }
      },
      {
        "id": "balanced_approach",
        "name": "Balance cost and performance",
        "objectives": {
          "component-mid-tier": 1.0,
          "component-efficient": 0.8,
          "component-cost-effective": 0.6
        }
      }
    ],
    "policies": {
      "timeout_ms": 30000,
      "max_solutions": 10
    },
    "include_metadata": false,
    "derived_properties": ["total_cost", "performance_score"]
  },

  "example_response": {
    "configurations": [
      {
        "objective_id": "cost_minimization",
        "success": true,
        "artifact": {
          "id": "config-001",
          "resolution_context": {
            "database_id": "db-001",
            "branch_id": "main"
          },
          "configuration": [
            {
              "id": "solution-instance-001",
              "class_id": "component",
              "properties": {
                "cost": 100.0,
                "performance": 3.2
              }
            }
          ],
          "solve_metadata": {
            "total_time_ms": 0,
            "pipeline_phases": []
          }
        },
        "error": null
      },
      {
        "objective_id": "performance_maximization",
        "success": true, 
        "artifact": {
          "id": "config-002",
          "resolution_context": {
            "database_id": "db-001",
            "branch_id": "main"
          },
          "configuration": [
            {
              "id": "solution-instance-002",
              "class_id": "component",
              "properties": {
                "cost": 350.0,
                "performance": 9.8
              }
            }
          ],
          "solve_metadata": {
            "total_time_ms": 0,
            "pipeline_phases": []
          }
        },
        "error": null
      },
      {
        "objective_id": "balanced_approach",
        "success": false,
        "artifact": {
          "id": "config-003",
          "resolution_context": {
            "database_id": "db-001",
            "branch_id": "main"
          },
          "configuration": [],
          "solve_metadata": {
            "total_time_ms": 0,
            "pipeline_phases": []
          }
        },
        "error": "Solve failed: No feasible solution found for balanced objectives"
      }
    ],
    "batch_metadata": {
      "total_time_ms": 245,
      "objectives_processed": 3,
      "successful_solutions": 2,
      "failed_solutions": 1,
      "queried_instance_id": "target-instance-001",
      "database_id": "db-001", 
      "branch_id": "main"
    }
  },

  "key_features": [
    "‚úÖ Multiple objectives in a single request",
    "‚úÖ Each objective set gets its own configuration result",
    "‚úÖ Batch processing with performance optimization", 
    "‚úÖ Individual success/failure tracking per objective",
    "‚úÖ Optional metadata collection control (include_metadata: false for performance)",
    "‚úÖ Comprehensive batch operation metadata",
    "‚úÖ Support for both main branch and specific branch queries",
    "‚úÖ Backward compatibility - existing single query endpoints unchanged"
  ],

  "performance_benefits": [
    "üöÄ Single request instead of multiple API calls",
    "üìä Batch processing reduces overhead", 
    "‚ö° Optional metadata collection (include_metadata: false) for maximum speed",
    "üîÑ Efficient pipeline reuse for multiple objectives",
    "üíæ Reduced network latency with batch responses"
  ],

  "use_cases": [
    "üéØ Multi-objective optimization (cost vs performance vs quality)",
    "üìà Scenario analysis (best case, worst case, average case)",
    "üîç Sensitivity analysis (how different weights affect solutions)",
    "‚öñÔ∏è Trade-off exploration (find Pareto optimal solutions)",
    "üß™ A/B testing configurations",
    "üìä Batch configuration generation for dashboards"
  ]
}